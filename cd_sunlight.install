<?php

/**
 * @file
 * Install/Updates for cd_sunlight.
 */

/**
 * Implements hook_schema().
 */
function cd_sunlight_schema() {
  $schema['cd_sunlight_cron'] = array(
    'description' => 'Contains contact_ids that will be sent for CD Lookup on the next cron run.',
    'fields' => array(
      'cd_sunlight_cron_id' => array(
        'description' => 'Autoincrementing primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'storage_system' => array(
        'description' => 'Contact storage system.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'contact_id' => array(
        'description' => 'Contact ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'request_uri' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'backtrace' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Optional backtrace. Only stored when debugging mode is enabled.',
      ),
      'insert_time' => array(
        'description' => 'When this row was inserted.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'processed' => array(
        'description' => '0 when the contact is first queued, set to 1 when dequeued.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('cd_sunlight_cron_id'),
    'indexes' => array(
      'cd_sunlight_cron_contact_id_processed_idx' => array('contact_id', 'processed'),
    ),
  );

  $schema['cd_sunlight_legislators'] = array(
    'description' => 'The current members of Congress as returned by the Sunlight API.',
    'fields' => array(
      'legislator_id' => array(
        'description' => 'Autoincrementing primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'last_update_time' => array(
        'description' => 'When this row was last updated.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'first_name' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'middle_name' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'last_name' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'name_suffix' => array(
        'type' => 'varchar',
        'length' => '8',
        'not null' => FALSE,
      ),
      'nickname' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'title' => array(
        'description' => 'Either "Sen" or "Rep"',
        'type' => 'varchar',
        'length' => '3',
        'not null' => FALSE,
      ),
      'party' => array(
        'description' => 'Either D, R, or I',
        'type' => 'varchar',
        'length' => '1',
        'not null' => FALSE,
      ),
      'state' => array(
        'type' => 'varchar',
        'length' => '2',
        'not null' => TRUE,
        'default' => '__',
      ),
      'district' => array(
        'description' => 'Only for Reps.  The CD that they legislate.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'in_office' => array(
        'description' => 'Is the legislator current.  Always 1 for our purposes.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'gender' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => FALSE,
      ),
      'phone' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'fax' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'website' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'contact_form' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'office' => array(
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'bioguide_id' => array(
        'description' => 'http://bioguide.congress.gov/',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'votesmart_id' => array(
        'description' => 'http://votesmart.org/',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'fec_id' => array(
        'description' => 'Federal Elections Commission ID',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'govtrack_id' => array(
        'description' => 'http://govtrack.us/',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'crp_id' => array(
        'description' => 'http://www.opensecrets.org/',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'twitter_id' => array(
        'description' => 'http://twitter.com/',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'youtube_id' => array(
        'description' => 'http://youtube.com/',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'senate_class' => array(
        'description' => "For senators I, II, or III depending on the Senator's election term.",
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'birthday' => array(
        'description' => "YYYY-MM-DD formatted birth date.",
        'type' => NULL,
        'mysql_type' => 'DATE',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE,
      ),
      'facebook_id' => array(
        'description' => t("Facebook ID."),
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => ''
      ),
      'term_start' => array(
        'description' => t ( "The start date of the member’s current term." ),
        'mysql_type' => 'DATE',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'term_end' => array(
        'description' => t ( "The end date of the member’s current term." ),
        'mysql_type' => 'DATE',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'state_name' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE
      ),
      'state_rank' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE
      ),
      'lis_id' => array(
        'description' => 'An official ID used by some sources for Senators.',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'thomas_id' => array(
        'description' => 'An official ID used by THOMAS.gov and Congress.gov for members present in those systems.',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('legislator_id'),
    'indexes' => array(
      'cd_sunlight_legislators_party_idx' => array('party'),
      'cd_sunlight_legislators_state_district_idx' => array('state', 'district'),
      'cd_sunlight_legislators_title_idx' => array('title'),
      'cd_sunlight_legislators_gender_idx' => array('gender'),
    ),
  );

  return $schema;
}


/**
 * Implements hook_requriements().
 */
function cd_sunlight_requirements($phase) {
  global $db_prefix;
  $requirements = array();
  if ($phase == 'runtime') {

    // Raise an error if a the module has not been setup.
    if (!variable_get('cd_sunlight_api_key', '')) {
      $requirements['cd_sunlight_setup'] = array(
        'title' => 'Sunlight Congressional District',
        'description' => t('You have not <a href="!url">configured</a> the module.'
          , array('!url' => url('admin/config/services/cd_sunlight'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Not configured'),
      );
    }

    // Report the number of lookups ever performed.
    $requirements['cd_sunlight_total_lookups'] = array(
      'title' => 'Sunlight Congressional District lookups',
      'value' => t('A total of !count lookups to Sunlight have been performed.',
        array('!count' => number_format(variable_get('cd_sunlight_total_lookups', 0)))),
      'severity' => REQUIREMENT_INFO,
    );

    // Report the number of records in the lookup queue.
    $query = db_select('cd_sunlight_cron')->condition('processed', FALSE);
    $count = $query->countQuery()->execute()->fetchField();
    $requirements['cd_sunlight_count'] = array(
      'title' => 'Sunlight Congressional District queue',
      'value' => t('There are !count contacts in the queue for a CD lookup.',
        array('!count' => $count)),
      'count' => $count,
      'severity' => REQUIREMENT_INFO,
    );

    // Report an error if there are no legislators (cron needs to be run).
    if (!_cd_sunlight_legislators_exist()) {
      $requirements['cd_sunlight_legislators_exist'] = array(
        'title' => 'Members of Congress',
        'value' => 'Do not exist',
        'description' => t('Run cron to retrieve members of Congress from Sunlight.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }

  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 *
 * @return none
 */
function cd_sunlight_uninstall() {
  variable_del('cd_sunlight_api_key');
  variable_del('cd_sunlight_cron_load_limit');
  variable_del('cd_sunlight_geocoding_off');
  variable_del('cd_sunlight_geocode_username');
  variable_del('cd_sunlight_http_auth_user');
  variable_del('cd_sunlight_http_auth_password');
  variable_del('cd_sunlight_api_key');
  variable_del('cd_sunlight_cron_contact_limit');
  variable_del('cd_sunlight_total_lookups');
  variable_del('cd_sunlight_civicrm_cd');
  variable_del('cd_sunlight_civicrm_cd_override');
  variable_del('cd_sunlight_crypt_iv');
}

/**
 * Change our cron table to the new and improved version with more detailed logging.
 */
function cd_sunlight_update_6001() {

  // First get all the existing contact_ids.
  $res = db_query('SELECT contact_id FROM {cd_sunlight_cron}');
  $contact_ids = array();
  while ($row = db_fetch_object($res)) {
    $contact_ids[] = $row->contact_id;
  }

  // Drop the old table.
  db_drop_table('cd_sunlight_cron');

  // Recreate the table.
  $table = array(
    'description' => t('Contains contact_ids that will be sent for CD Lookup on the next cron run.'),
    'fields' => array(
      'cd_sunlight_cron_id' => array(
        'description' => t('Autoincrementing primary key.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'contact_id' => array(
        'description' => t('CiviCRM Contact ID.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'request_uri' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'backtrace' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Optional backtrace. Only stored when debugging mode is enabled.',
      ),
      'insert_time' => array(
        'description' => t('When this row was inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'processed' => array(
        'description' => t('0 when the contact is first queued, set to 1 when dequeued.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('cd_sunlight_cron_id'),
    'indexes' => array(
      'cd_sunlight_cron_contact_id_processed_idx' => array('contact_id', 'processed'),
    ),
  );
  db_create_table('cd_sunlight_cron', $table);

  // Requeue the contact_ids from the old table.
  foreach ($contact_ids as $contact_id) {
    cd_sunlight_contact_enqueue($contact_id);
  }

  return t('Changed {cd_sunlight_cron} table to the new and improved version with more detailed logging.');
}

/**
 * Update our schema with the new fields that Sunlight provides: senate_class and birthdate.
 */
function cd_sunlight_update_6002() {
  $senate_class = array(
    'description' => t("For senators I, II, or III depending on the Senator's election term."),
    'type' => 'varchar',
    'length' => '3',
    'not null' => TRUE,
    'default' => '',
  );
  db_add_field('cd_sunlight_legislators', 'senate_class', $senate_class);
  $birthdate = array(
    'description' => t("YYYY-MM-DD formatted birth date."),
    'mysql_type' => 'DATE',
    'pgsql_type' => 'timestamp without time zone',
    'not null' => FALSE,
  );
  db_add_field('cd_sunlight_legislators', 'birthdate', $birthdate);
  return t('Updated {cd_sunlight_legislators} with the new fields that Sunlight provides: senate_class and birthdate.');
}

/**
 * Upgrade path for splitting the module.
 */
function cd_sunlight_update_6003() {

  // Enable module.
  system_rebuild_module_data();
  module_enable(array('cd_civicrm'));

  $return[] = array(
    'success' => TRUE,
    'query' => 'Enabled CD CiviCRM module.',
  );

  // Add new field.
  $storage_system = array(
    'description' => t('Contact storage system.'),
    'type' => 'varchar',
    'length' => 64,
    'not null' => TRUE,
    'default' => '',
  );
  db_add_field('cd_sunlight_cron', 'storage_system', $storage_system);

  // All contacts thus far must've been processed by CiviCRM.
  db_update('cd_sunlight_cron')
    ->fields(array('storage_system' => "civicrm"))
    ->execute();

  // Variables.
  variable_set('cd_civicrm_cd', variable_get('cd_sunlight_civicrm_cd', ''));
  variable_set('cd_civicrm_cd_override', variable_get('cd_sunlight_civicrm_cd_override', ''));
  variable_set('cd_civicrm_custom_field_cd', variable_get('cd_sunlight_civicrm_custom_field_cd', ''));
  variable_set('cd_civicrm_custom_field_cd_override', variable_get('cd_sunlight_civicrm_custom_field_cd_override', ''));
  variable_set('cd_civicrm_custom_table', variable_get('cd_sunlight_civicrm_custom_table', ''));
  variable_set('cd_civicrm_geocoding_off', variable_get('cd_sunlight_geocoding_off', ''));
  variable_del('cd_sunlight_civicrm_cd');
  variable_del('cd_sunlight_civicrm_cd_override');
  variable_del('cd_sunlight_civicrm_custom_field_cd');
  variable_del('cd_sunlight_civicrm_custom_field_cd_override');
  variable_del('cd_sunlight_civicrm_custom_table');
  variable_del('cd_sunlight_geocoding_off');
  variable_del('cd_sunlight_geocode_username');
  variable_del('cd_sunlight_crypt_iv');
  variable_del('cd_sunlight_http_auth_user');
  variable_del('cd_sunlight_http_auth_password');

  // Check for batch geocoding.
  if (defined('CD_SUNLIGHT_GEOCODE_PASSWORD')) {
    $return[] = array(
      'success' => FALSE,
      'query' => t('The CD_SUNLIGHT_GEOCODE_PASSWORD in settings.php must be renamed to CD_CIVICRM_GEOCODE_PASSWORD.'),
    );
  }

  // Check for geocoding user.
  if (variable_get('cd_civicrm_geocoding_off', FALSE)) {
    $return[] = array(
      'success' => FALSE,
      'query' => t('You must re set the <a href="!url">Advanced Batch Geocoding</a> settings as the encryption logic has changed.',
              array('!url' => url('admin/config/services/cd_sunlight'))),
    );
  }

  cache_clear_all('*', 'cache', TRUE);
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_menu', TRUE);
  menu_rebuild();

  return t('Split cd_sunlight module into cd_sunlight and cd_civicrm.');
}

/**
 * Increase the length of the webform field.
 */
function cd_sunlight_update_6004() {
  $webform = array(
    'type' => 'varchar',
    'length' => '255',
    'not null' => FALSE,
  );

  db_change_field('cd_sunlight_legislators', 'webform', 'webform', $webform);
  return t('Increased length of webform field.');
}

/**
 * Update schema with the new fields that Sunlight provides: facebook_id.
 */
function cd_sunlight_update_6005() {
  $facebook_id = array(
    'description' => t("Facebook ID."),
    'type' => 'varchar',
    'length' => '64',
    'not null' => TRUE,
    'default' => '',
    'initial' => '',
  );
  db_add_field('cd_sunlight_legislators', 'facebook_id', $facebook_id);
  _cd_sunlight_congress_update_all();
  return t('Updated schema with the new fields that Sunlight provides: facebook_id.');
}


/**
 * Clear appropriate caches.
 */
function cd_sunlight_update_7100() {

  // Remove the blocks that had the old-style capitalized names.
  db_query("DELETE FROM {block} WHERE module = 'views' AND delta IN('Congress-block_1', 'Congress-block_3')");

  // Clear the caches.
  cache_clear_all('*', 'cache_block', TRUE);
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_page', TRUE);
  
  return t('Clear appropriate caches.');
}

/**
 * Update the schema to reflect the new Sunlight API.
 */
function cd_sunlight_update_7101() {
  // Some fields need to be updated, most of which are just name changes.
  $updates = array(
    'firstname' => array(
      'new_name' => 'first_name',
      'new_spec' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE
      ),
    ),
    'middlename' => array(
      'new_name' => 'middle_name',
      'new_spec' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE
      ),
    ),
    'lastname' => array(
      'new_name' => 'last_name',
      'new_spec' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE
      ),
    ),
    'webform' => array(
      'new_name' => 'contact_form',
      'new_spec' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
    ),
    'congress_office' => array(
      'new_name' => 'office',
      'new_spec' => array(
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE
      ),
    ),
    'youtube_url' => array(
      'new_name' => 'youtube_id',
      'new_spec' => array(
        'description' => 'http://youtube.com/',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE
      )
    ),
    'senate_class' => array(
      'new_name' => 'senate_class',
      'new_spec' => array(
        'description' => "For senators I, II, or III depending on the Senator's election term.",
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => FALSE
      ),
    ),
    'birthdate' => array(
      'new_name' => 'birthday',
      'new_spec' => array(
        'description' => "YYYY-MM-DD formatted birth date.",
        'type' => NULL,
        'mysql_type' => 'DATE',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
    ),
  );
  foreach ($updates as $name => $spec) {
    if (db_field_exists('cd_sunlight_legislators', $name)) {
      db_change_field('cd_sunlight_legislators', $name, $spec['new_name'], $spec['new_spec']);
    }
  }

  // Some fields have been removed from the API.
  $deletions = array('email', 'eventful_id', 'congresspedia_url');
  foreach ($deletions as $field) {
    db_drop_field('cd_sunlight_legislators', $field);
  }

  // Some fields have been added to the API.
  $additions = array(
    'term_start' => array(
      'description' => t ( "The start date of the member’s current term." ),
      'mysql_type' => 'DATE',
      'pgsql_type' => 'timestamp without time zone',
      'not null' => FALSE
    ),
    'term_end' => array(
      'description' => t ( "The end date of the member’s current term." ),
      'mysql_type' => 'DATE',
      'pgsql_type' => 'timestamp without time zone',
      'not null' => FALSE
    ),
    'state_name' => array(
      'type' => 'varchar',
      'length' => '64',
      'not null' => FALSE,
    ),
    'state_rank' => array(
      'type' => 'varchar',
      'length' => '64',
      'not null' => FALSE,
    ),
    'lis_id' => array(
      'description' => 'An official ID used by some sources for Senators.',
      'type' => 'varchar',
      'length' => '16',
      'not null' => FALSE,
    ),
    'thomas_id' => array(
      'description' => 'An official ID used by THOMAS.gov and Congress.gov for members present in those systems.',
      'type' => 'varchar',
      'length' => '16',
      'not null' => FALSE,
    ),
  );
  foreach ($additions as $name => $spec) {
    db_add_field('cd_sunlight_legislators', $name, $spec);
  }
}
